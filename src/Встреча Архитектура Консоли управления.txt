05.04.2024
Встреча Архитектура Консоли управления
Участники: Оля К., Паша, Кристина, Денис, я
Сценарии и задачи, которые надо поддержать: 
- перенос настроек с тестового сервера на прод;
- сравнение настроек на тестовом и рабочем серверах;
- потребуются перекрёстные ссылки в настройках - для быстрого перехода при зависимости между настройками;
- замена устаревших настроек - показывать админу;
- показывать админу значения, отличные от дефолтных.

1. Учесть в прототипе предложения Паши по UI:
- поиск настроек; в результатах поиска показывать только найденные настройки;
- показать только изменённые настройки (отличные от дефолтных);
- сравнение настроек: в одной части экрана настройки на одном сервере, в другой на другом сервере, выровнять деревья их настроек;
- поддержка разных версий;
2. Отдельный интерфейс того, что настраиваем: серверы, подключения. И есть страница настройки определённой сущности, которая на вход загружает некоторую JSON с описанием настроек. В ней каждая настройка имеет свои метаданные: 
- название;
- ID;
- редактор, который её редактирует; 
- комментарий, который отображается пользователю;
- комментарий о совместимости версий;
- прочее...
Эти настройки сгруппированы в группы настроек. Страница поглощает json и рисует универсальный интерфейс, в котором слева группа настроек, справа - сами настройки рисуются в виде простыни, одна за другой с использованием тех редакторов (компонентов), которые указаны в описании каждой настройки. Компонент может располагаться в самой админке, а может загружаться из отдельного бандла по версии и имени. Т.е. он как-то устанавливается в Админку, например, регистрируется и  при необходимости по имени и названию динамически его можно подгрузить.
3. Для каждого типа сущности для каждой версии своя json. Будет какой-то менеджер настроек, который будет знать места, где эти json лежат, в которые эти json можно положить. Например, мы говорим, что для сервера ВК для версии 18 мы загрузили какую-то JSON и положили её в такую-то папку или в базу залили. Далее - этому менеджеру настроек поступила задача открыть страницу настроек ВК 18. Он идёт в то место, где лежат эти JSON. Берёт настройку для ВК 18, загружает и отдаёт.
4. Сами значения настроек хранятся в хранилище настроек (как раньше). Есть ли у настроек свой ИД? Как минимум, у них есть свой путь. Вроде своё уникальное значение названия, как в реестре - это и есть идентификатор.
5. На сервере потребуется сделать удобный апи, который позволит работать с настройками, например, получить по идентификатору какую-то настройку, сохранить её и т.д..
6. Приведение к такой архитектуре будет итеративным. На первом этапе обвязка, т.е. менеджер, json настроек, страницы этих настроек, которые эти json превращают в интерфейс. И пока сделаем ограниченное количество редакторов, которые будут состоять из уже реализованных виджетов - будет три настройки: 
1) настройки подключения к Docsvision (серверу приложений);
2) настройки Worker Service;
3) настройки почтового сервера. 
Т.е. будет три объекта в JSON-ках, и они будут использовать редакторы, которые уже реализованы, просто рендерить их в открытом виде. 
На этом этапе сможем отладить архитектуру и попробуем какой-то из виджетов декомп. на отдельные, атомарные редакторы для каждой настройки. Соответственно, два требования - одно - на переделать JSON, второе - декомпозировать виджеты на атомарные настройки -  можно отдавать в разработку.
7. Параллельно с п.6 продолжаем прорабатывать UI.
8. У группы настроек может быть своя разметка - необязательно простыня, может быть, некоторые настройки будут на одном уровне. Понадобится группировка. Как управлять расположением групп?
9. Надо ли партнёрам давать возможность изменять набор настроек через изменение json?
10. Редакторы групп настроек - нннадо???
11. Как управлять экземплярами, которые настраиваем, например настройка БД - в json ссылка на редактор особых компонентов/ специальный компонент для сложных настроек.
12. Пожелание к реализации: редактор настроек отобразить на отдельной странице/ в отдельном модальном окне/ фрейме.
13. Отдельный интерфейс навигации по настраиваемым сущностям. Каркас настроек будет прохардкожен. Внутренности настраиваются через json.
14. У каждой настройки свой адрес.
